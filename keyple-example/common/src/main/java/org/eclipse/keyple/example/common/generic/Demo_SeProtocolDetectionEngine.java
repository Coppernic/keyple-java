/*
 * Copyright (c) 2018 Calypso Networks Association https://www.calypsonet-asso.org/
 *
 * All rights reserved. This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License version 2.0 which accompanies this distribution, and is
 * available at https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 */

package org.eclipse.keyple.example.common.generic;

import java.util.*;
import org.eclipse.keyple.example.common.calypso.HoplinkInfoAndSampleCommands;
import org.eclipse.keyple.seproxy.*;
import org.eclipse.keyple.seproxy.event.ObservableReader;
import org.eclipse.keyple.seproxy.event.ReaderEvent;
import org.eclipse.keyple.seproxy.protocol.ContactlessProtocols;
import org.eclipse.keyple.util.ByteBufferUtils;

/**
 * This code demonstrates the multi-protocols capability of the Keyple SeProxy:
 * <ul>
 * <li>instantiates a PC/SC plugin for a reader which name matches the regular expression provided
 * by poReaderName.</li>
 * <li>uses the observable mechanism to handle SE insertion/detection</li>
 * <li>expects SE with various protocols (technologies)</li>
 * <li>shows the identified protocol when a SE is detected</li>
 * <li>executes a simple Hoplink reading when a Hoplink SE is identified</li>
 * </ul>
 * The program spends most of its time waiting for a Enter key before exit. The actual SE processing
 * is mainly event driven through the observability.
 */

/**
 * This class handles the reader events generated by the SeProxyService
 */
public class Demo_SeProtocolDetectionEngine implements ObservableReader.ReaderObserver {
    private ProxyReader poReader;

    public Demo_SeProtocolDetectionEngine() {
        super();
    }

    /* Assign reader to the transaction engine */
    public void setReader(ProxyReader poReader) {
        this.poReader = poReader;
    }

    public void initialize() {

    }

    /**
     * This method is called whenever a reader event occurs.
     *
     * @param event the current event
     */
    @Override
    public void update(ReaderEvent event) {
        switch (event.getEventType()) {
            case SE_INSERTED:
                System.out.println("SE INSERTED");
                System.out.println("\nStart processing of a PO");
                operatePoTransaction();
                break;
            case SE_REMOVAL:
                System.out.println("SE REMOVED");
                System.out.println("\nWait for PO");
                break;
            default:
                System.out.println("IO Error");
        }
    }

    /**
     * This method is called when a SE is inserted (or presented to the reader's antenna). It
     * executes a SeRequestSet and processes the SeResponseSet showing the APDUs exchanges
     */
    public void operatePoTransaction() {

        try {
            // create a request set:
            // * getting the SE UID for all SE protocols except ISO14443-4
            // * executing a Hoplink simple read scenario for ISO14443-4

            // create a list of requests
            Set<SeRequest> poRequests = new LinkedHashSet<SeRequest>();

            ApduRequest pcscContactlessReaderGetData =
                    new ApduRequest(ByteBufferUtils.fromHex("FFCA000000"), false);
            List<ApduRequest> pcscContactlessReaderGetDataList = new ArrayList<ApduRequest>();
            pcscContactlessReaderGetDataList.add(pcscContactlessReaderGetData);

            // process SDK defined protocols
            for (ContactlessProtocols protocol : ContactlessProtocols.values()) {
                switch (protocol) {
                    case PROTOCOL_ISO14443_4:
                        // get Apdu list from HoplinkInfoAndSampleCommands class
                        // List<ApduRequest> poApduRequestList = new ArrayList<ApduRequest>();
                        List<ApduRequest> poApduRequestList = new ArrayList<ApduRequest>();
                        // add common get UID command
                        poApduRequestList.addAll(pcscContactlessReaderGetDataList);
                        // add Hoplink specific commands
                        poApduRequestList.addAll(HoplinkInfoAndSampleCommands.getApduList());
                        // add a SeRequest with the AID from HoplinkInfoAndSampleCommands and the
                        // requests
                        // list
                        poRequests.add(new SeRequest(
                                new SeRequest.AidSelector(
                                        ByteBufferUtils.fromHex(HoplinkInfoAndSampleCommands.AID)),
                                poApduRequestList, false, protocol));
                        break;
                    case PROTOCOL_ISO14443_3A:
                    case PROTOCOL_ISO14443_3B:
                        // not handled in this demo code
                        break;
                    case PROTOCOL_MIFARE_DESFIRE:
                    case PROTOCOL_B_PRIME:
                        // intentionally ignored for demo purpose
                        break;
                    default:
                        poRequests.add(new SeRequest(new SeRequest.AtrSelector(".*"),
                                pcscContactlessReaderGetDataList, false, protocol));
                        break;
                }
            }

            // process application specific protocols
            for (CustomProtocols protocol : CustomProtocols.values()) {
                poRequests.add(new SeRequest(new SeRequest.AtrSelector(".*"),
                        pcscContactlessReaderGetDataList, false, protocol));
            }

            // create a SeRequestSet from the SeRequest list
            SeRequestSet poRequest = new SeRequestSet(poRequests);

            // execute request and get response
            SeResponseSet poResponse = poReader.transmit(poRequest);

            // output results
            Iterator<SeRequest> seReqIterator = poRequests.iterator();
            int requestIndex = 0;
            for (SeResponse seResponse : poResponse.getResponses()) {
                SeRequest seRequest = seReqIterator.next();

                if (seResponse != null) {
                    System.out.println("Protocol \"" + seRequest.getProtocolFlag().getName()
                            + "\" matched for request number " + String.valueOf(requestIndex));
                    List<ApduRequest> poApduRequestList = seRequest.getApduRequests();
                    List<ApduResponse> poApduResponseList = seResponse.getApduResponses();
                    for (int i = 0; i < poApduResponseList.size(); i++) {
                        System.out.println(" CMD: "
                                + ByteBufferUtils.toHex(poApduRequestList.get(i).getBytes()));
                        System.out.println("RESP: "
                                + ByteBufferUtils.toHex(poApduResponseList.get(i).getBytes()));
                    }
                }
                requestIndex++;
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}
